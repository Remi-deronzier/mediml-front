/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type IndexGet200 = { [key: string]: any };

export type WorkType = typeof WorkType[keyof typeof WorkType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WorkType = {
  children: 'children',
  Govt_jov: 'Govt_jov',
  Never_worked: 'Never_worked',
} as const;

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type StrokePrediction = typeof StrokePrediction[keyof typeof StrokePrediction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StrokePrediction = {
  stroke: 'stroke',
  no_stroke: 'no_stroke',
} as const;

export interface StrokePredictionsDto {
  predictions: StrokePrediction[];
}

export type SmokingStatus = typeof SmokingStatus[keyof typeof SmokingStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmokingStatus = {
  formerly_smoked: 'formerly smoked',
  never_smoked: 'never smoked',
  smokes: 'smokes',
  Unknown: 'Unknown',
} as const;

export type ResidenceType = typeof ResidenceType[keyof typeof ResidenceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResidenceType = {
  Rural: 'Rural',
  Urban: 'Urban',
} as const;

export interface PatientDto {
  gender: Gender;
  age: number;
  hypertension: boolean;
  heart_disease: boolean;
  ever_married: boolean;
  work_type: WorkType;
  residence_type: ResidenceType;
  avg_glucose_level: number;
  bmi: number;
  smoking_status: SmokingStatus;
}

export interface PatientsDto {
  patients: PatientDto[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type Gender = typeof Gender[keyof typeof Gender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Gender = {
  Male: 'Male',
  Female: 'Female',
  Other: 'Other',
} as const;





  /**
 * @summary Index
 */
export const indexGet = <TData = AxiosResponse<IndexGet200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/`,options
    );
  }

/**
 * @summary Predict
 */
export const predictPredictPost = <TData = AxiosResponse<StrokePredictionsDto>>(
    patientsDto: PatientsDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/predict`,
      patientsDto,options
    );
  }

export type IndexGetResult = AxiosResponse<IndexGet200>
export type PredictPredictPostResult = AxiosResponse<StrokePredictionsDto>
