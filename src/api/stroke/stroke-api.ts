/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { strokeApiInstance } from './stroke-axios-config';

export type IndexGet200 = { [key: string]: any };

export type WorkType = (typeof WorkType)[keyof typeof WorkType];

export const WorkType = {
  children: 'children',
  Govt_jov: 'Govt_jov',
  Never_worked: 'Never_worked',
  Private: 'Private',
  'Self-employed': 'Self-employed',
} as const;

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type StrokePrediction =
  (typeof StrokePrediction)[keyof typeof StrokePrediction];

export const StrokePrediction = {
  stroke: 'stroke',
  no_stroke: 'no_stroke',
} as const;

export interface StrokePredictionsDto {
  predictions: StrokePrediction[];
}

export type SmokingStatus = (typeof SmokingStatus)[keyof typeof SmokingStatus];

export const SmokingStatus = {
  formerly_smoked: 'formerly smoked',
  never_smoked: 'never smoked',
  smokes: 'smokes',
  Unknown: 'Unknown',
} as const;

export type ResidenceType = (typeof ResidenceType)[keyof typeof ResidenceType];

export const ResidenceType = {
  Rural: 'Rural',
  Urban: 'Urban',
} as const;

export interface PatientDto {
  gender: Gender;
  age: number;
  hypertension: boolean;
  heart_disease: boolean;
  ever_married: boolean;
  work_type: WorkType;
  residence_type: ResidenceType;
  avg_glucose_level: number;
  bmi: number;
  smoking_status: SmokingStatus;
}

export interface PatientsDto {
  patients: PatientDto[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type Gender = (typeof Gender)[keyof typeof Gender];

export const Gender = {
  Male: 'Male',
  Female: 'Female',
  Other: 'Other',
} as const;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Index
 */
export const indexGet = (
  options?: SecondParameter<typeof strokeApiInstance>
) => {
  return strokeApiInstance<IndexGet200>({ url: `/`, method: 'get' }, options);
};

/**
 * @summary Predict
 */
export const predictPredictPost = (
  patientsDto: PatientsDto,
  options?: SecondParameter<typeof strokeApiInstance>
) => {
  return strokeApiInstance<StrokePredictionsDto>(
    {
      url: `/predict/stroke`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: patientsDto,
    },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type IndexGetResult = NonNullable<Awaited<ReturnType<typeof indexGet>>>;
export type PredictPredictPostResult = NonNullable<
  Awaited<ReturnType<typeof predictPredictPost>>
>;
