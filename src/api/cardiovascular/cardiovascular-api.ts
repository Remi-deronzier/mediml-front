/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import { cardiovascularApiInstance } from './cardiovascular-axios-config';
export type IndexGet200 = { [key: string]: any };

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type CardiovascularPredictionDto = typeof CardiovascularPredictionDto[keyof typeof CardiovascularPredictionDto];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardiovascularPredictionDto = {
  cardiovascular: 'cardiovascular',
  no_cardiovascular: 'no_cardiovascular',
} as const;

export interface CardiovascularPredictionsDto {
  predictions: CardiovascularPredictionDto[];
}

export type Checkup = typeof Checkup[keyof typeof Checkup];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Checkup = {
  Never: 'Never',
  '5_or_more_years_ago': '5 or more years ago',
  Within_the_past_5_years: 'Within the past 5 years',
  Within_the_past_2_years: 'Within the past 2 years',
  Within_the_past_year: 'Within the past year',
} as const;

export type GeneralHealth = typeof GeneralHealth[keyof typeof GeneralHealth];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GeneralHealth = {
  Poor: 'Poor',
  Fair: 'Fair',
  Good: 'Good',
  Very_Good: 'Very Good',
  Excellent: 'Excellent',
} as const;

export interface CardiovascularPatientDto {
  gender: Gender;
  general_health: GeneralHealth;
  checkup: Checkup;
  age: string;
  exercise: boolean;
  skin_cancer: boolean;
  other_cancer: boolean;
  depression: boolean;
  diabetes: boolean;
  arthritis: boolean;
  smoking: boolean;
  fruit_consumption: number;
  alcohol_consumption: number;
  green_vegetable_consumption: number;
  fried_potato_consumption: number;
  height: number;
  weight: number;
  bmi: number;
}

export interface CardiovascularPatientsDto {
  patients: CardiovascularPatientDto[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type Gender = typeof Gender[keyof typeof Gender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Gender = {
  Male: 'Male',
  Female: 'Female',
} as const;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;


/**
 * @summary Index
 */
export const indexGet = (
  options?: SecondParameter<typeof cardiovascularApiInstance>
) => {
  return cardiovascularApiInstance<IndexGet200>({ url: `/`, method: 'get' }, options);
};

/**
 * @summary Cardiovascular Predict
 */

export const predictPredictPost = (
  patientsDto: CardiovascularPatientsDto,
  options?: SecondParameter<typeof cardiovascularApiInstance>
) => {
  return cardiovascularApiInstance<CardiovascularPredictionsDto>(
    {
      url: `/predict/cardiovascular`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: patientsDto,
    },
    options
  );
};

export type IndexGetResult = AxiosResponse<IndexGet200>
export type PredictPredictPostResult = AxiosResponse<CardiovascularPredictionsDto>
